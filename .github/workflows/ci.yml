name: EXR-Thumbnail-Generator CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
      fail-fast: false

    steps:
    # [CHECKOUT LATEST]
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
    
    # [INSTALL OPENIMAGEIO]
    # Linux
    - name: Install OpenImageIO (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenimageio-dev
        sudo apt-get install -y openimageio-tools libopenexr-dev libopencolorio-dev libopencv-contrib-dev
    
    # MacOS
    - name: Install OpenImageIO (macOS)
      if: matrix.os == 'macOS-latest'
      run: brew install openimageio

    # Windows: setup vcpkg and install OpenImageIO
    - name: Install vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg integrate install # it makes the installed libraries available to your build system.

    # Windows: install OpenImageIO
    - name: Install OpenImageIO via vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\vcpkg\vcpkg install openimageio:x64-windows

    #- name: Set CMAKE_PREFIX_PATH (Windows)
    #  if: matrix.os == 'windows-latest'
    #  run: |
    #    echo "CMAKE_PREFIX_PATH=.\vcpkg\installed\x64-windows" >> $GITHUB_ENV
    
    #- name: Set OpenImageIO_DIR for Windows
    #  if: matrix.os == 'windows-latest'
    #  run: echo "OpenImageIO_DIR=.\vcpkg\installed\x64-windows\share\openimageio" >> $GITHUB_ENV  
            
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    #- name: Configure CMake
    #  shell: bash
    #  working-directory: ${{github.workspace}}/build
    #  run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release # -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
    
    # [CONFIGURE CMAKE]
    - name: Configure CMake on Ubuntu and macOS
      if: runner.os == 'Linux' || runner.os == 'macOS'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake on Windows
      if: runner.os == 'Windows'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
    
    # [BUILD]
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config Release

    # [LIST WHAT HAVE BEEN COMPILED]
    - name: List executables (Ubuntu and macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: ls -lRh ${{github.workspace}}/build
      
    - name: List executables (Windows)
      if: matrix.os == 'windows-latest'
      run: find "${{ github.workspace }}/build" -type f
      shell: bash
    
    # [ARCHIVE & UPLOAD] 
    # Archive the build outputs for Ubuntu and macOS
    - name: Archive Outputs (Ubuntu, MacOs)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: |
        tar czvf EXR_thumbnail_generator-${{ runner.os }}.tar.gz -C ${{github.workspace}}/build .

    # Upload the archived outputs for Ubuntu and macOS
    - name: Upload Outputs (Ubuntu, MacOs)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      uses: actions/upload-artifact@v3
      with:
        name: EXR_thumbnail_generator-${{ runner.os }}.tar.gz
        path: EXR_thumbnail_generator-${{ runner.os }}.tar.gz

    # Archive the build outputs for Windows
    - name: Archive Outputs (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        7z a EXR_thumbnail_generator-${{ runner.os }}.zip ${{github.workspace}}/build/Release/*

    # Upload the archived outputs for Windows
    - name: Upload Outputs (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: EXR_thumbnail_generator-${{ runner.os }}.zip
        path: EXR_thumbnail_generator-${{ runner.os }}.zip

    # [UPLOAD ARTIFACTS]
    #- name: Upload Artifact (Ubuntu, MacOs)
    #  uses: actions/upload-artifact@v3
    #  if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
    #  with:
    #    name: EXR_thumbnail_generator-${{ runner.os }}
    #    path: ${{github.workspace}}/build/

    #- name: Upload Artifact (Windows)
    #  uses: actions/upload-artifact@v3
    #  if: matrix.os == 'windows-latest'
    #  with:
    #    name: EXR_thumbnail_generator-${{ runner.os }}
    #    path: ${{github.workspace}}/build/Release/* 

  release:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macOS-latest', 'windows-latest']
        include:
          - os: 'ubuntu-latest'
            asset_name: 'EXR_thumbnail_generator-Linux.tar.gz'
            content_type: 'application/gzip'
          - os: 'macOS-latest'
            asset_name: 'EXR_thumbnail_generator-macOS.tar.gz'
            content_type: 'application/gzip'
          - os: 'windows-latest'
            asset_name: 'EXR_thumbnail_generator-Windows.zip'
            content_type: 'application/zip'
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@master
      with:
        name: ${{ matrix.asset_name }}
        path: artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    # Upload the archived outputs to the release using matrix values
    - name: Upload Release Assets
      uses: actions/upload-release-asset@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: ${{ matrix.content_type }}




