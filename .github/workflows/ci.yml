name: EXR-Thumbnail-Generator CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, ] # [ubuntu-latest, macOS-latest, windows-latest]
      fail-fast: false

    steps:
    # [CHECKOUT LATEST]
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
    
    # [INSTALL OPENIMAGEIO]
    # Linux
    - name: Install OpenImageIO (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenimageio-dev
        sudo apt-get install -y openimageio-tools libopenexr-dev libopencolorio-dev libopencv-contrib-dev
    
    # MacOS
    - name: Install OpenImageIO (macOS)
      if: matrix.os == 'macOS-latest'
      run: brew install openimageio

    # Windows: setup vcpkg and install OpenImageIO
    - name: Install vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg integrate install # it makes the installed libraries available to your build system.

    # Windows: install OpenImageIO
    - name: Install OpenImageIO via vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\vcpkg\vcpkg install openimageio:x64-windows

    #- name: Set CMAKE_PREFIX_PATH (Windows)
    #  if: matrix.os == 'windows-latest'
    #  run: |
    #    echo "CMAKE_PREFIX_PATH=.\vcpkg\installed\x64-windows" >> $GITHUB_ENV
    
    #- name: Set OpenImageIO_DIR for Windows
    #  if: matrix.os == 'windows-latest'
    #  run: echo "OpenImageIO_DIR=.\vcpkg\installed\x64-windows\share\openimageio" >> $GITHUB_ENV  
            
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    #- name: Configure CMake
    #  shell: bash
    #  working-directory: ${{github.workspace}}/build
    #  run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release # -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
    
    # [CONFIGURE CMAKE]
    - name: Configure CMake on Ubuntu and macOS
      if: runner.os == 'Linux' # || runner.os == 'macOS'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake on Ubuntu and macOS
      if: runner.os == 'macOS'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_DEPLOYMENT_TARGET=11.6

    - name: Configure CMake on Windows
      if: runner.os == 'Windows'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
    
    # [BUILD]
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config Release

    # [LIST WHAT HAVE BEEN COMPILED]
    - name: List executables (Ubuntu and macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: ls -lRh ${{github.workspace}}/build
      
    - name: List executables (Windows)
      if: matrix.os == 'windows-latest'
      run: find "${{ github.workspace }}/build" -type f
      shell: bash
    
    # [ARCHIVE & UPLOAD] 
    # Archive the build outputs for Ubuntu and macOS
    - name: Archive Outputs (Ubuntu, MacOs)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: |
        tar czvf EXR_thumbnail_generator-${{ runner.os }}.tar.gz -C ${{github.workspace}}/build exr-thumbnail-generator
        
    # Upload the archived outputs for Ubuntu and macOS
    - name: Upload Outputs (Ubuntu, MacOs)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      uses: actions/upload-artifact@v3
      with:
        name: EXR_thumbnail_generator-${{ runner.os }}.tar.gz
        path: EXR_thumbnail_generator-${{ runner.os }}.tar.gz

    # Archive the build outputs for Windows
    - name: Archive Outputs (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        7z a EXR_thumbnail_generator-${{ runner.os }}.zip ${{github.workspace}}/build/Release/*

    # Upload the archived outputs for Windows
    - name: Upload Outputs (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: EXR_thumbnail_generator-${{ runner.os }}.zip
        path: EXR_thumbnail_generator-${{ runner.os }}.zip
  
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Download Artifacts
    - name: Download Artifacts
      uses: actions/download-artifact@master
      with:
        path: artifacts
    
    - name: Flatten directories structure after download
      run: |
        temp_dir=$(pwd)/artifacts_temp
        mkdir -p "$temp_dir"
        for dir in $(pwd)/artifacts/*; do
            if [[ -d "$dir" ]]; then
                mv "$dir"/* "$temp_dir/"
                rmdir "$dir"
            fi
        done
        mv "$temp_dir"/* $(pwd)/artifacts/
        rmdir "$temp_dir"

    # Setup Node.js environment
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    # Install semantic-release and plugins
    - name: Install dependencies
      run: |
        npm install semantic-release @semantic-release/github @semantic-release/changelog @semantic-release/git

    # Run semantic-release
    - name: Semantic Release
      id: semantic
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Get latest release
      id: latest_release
      run: |
        LATEST_RELEASE_URL=$(curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --url 'https://api.github.com/repos/${{ github.repository }}/releases/latest' \
            --silent \
            --location \
            | jq -r '.upload_url')
        echo "Latest release URL is $LATEST_RELEASE_URL"
        echo "upload_url=$LATEST_RELEASE_URL" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: List Artifacts
      run: |
        ls -lR artifacts/

    - name: Upload Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ls -lRh artifacts/
        BASE_UPLOAD_URL="${{ env.upload_url }}"
        BASE_UPLOAD_URL="${BASE_UPLOAD_URL/\{\?name,label\}/}" # Remove {?name,label} from the URL
        for asset in $(pwd)/artifacts/*; do
          echo "asset > $asset"
          asset_name=$(basename $asset)
          content_type=$(file --mime-type -b $asset)        
          curl \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: $content_type" \
            --data-binary "@$asset" \
            "${BASE_UPLOAD_URL}?name=$asset_name&label=$asset_name"
        done