name: EXR-Thumbnail-Generator CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest] #, windows-latest]
      fail-fast: false

    steps:
    # [CHECKOUT LATEST]
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
    
    # [INSTALL OPENIMAGEIO]
    # Linux
    - name: Install OpenImageIO (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenimageio-dev
        sudo apt-get install -y openimageio-tools libopenexr-dev libopencolorio-dev libopencv-contrib-dev
    
    # MacOS
    - name: Install OpenImageIO (macOS)
      if: matrix.os == 'macOS-latest'
      run: brew install openimageio

    # Windows: setup vcpkg and install OpenImageIO
    - name: Install vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        .\vcpkg\vcpkg integrate install # it makes the installed libraries available to your build system.

    # Windows: install OpenImageIO
    - name: Install OpenImageIO via vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\vcpkg\vcpkg install openimageio:x64-windows

    #- name: Set CMAKE_PREFIX_PATH (Windows)
    #  if: matrix.os == 'windows-latest'
    #  run: |
    #    echo "CMAKE_PREFIX_PATH=.\vcpkg\installed\x64-windows" >> $GITHUB_ENV
    
    #- name: Set OpenImageIO_DIR for Windows
    #  if: matrix.os == 'windows-latest'
    #  run: echo "OpenImageIO_DIR=.\vcpkg\installed\x64-windows\share\openimageio" >> $GITHUB_ENV  
            
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    #- name: Configure CMake
    #  shell: bash
    #  working-directory: ${{github.workspace}}/build
    #  run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release # -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
    
    # [CONFIGURE CMAKE]
    - name: Configure CMake on Ubuntu and macOS
      if: runner.os == 'Linux' || runner.os == 'macOS'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake on Windows
      if: runner.os == 'Windows'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
    
    # [BUILD]
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config Release

    # [LIST WHAT HAVE BEEN COMPILED]
    - name: List executables (Ubuntu and macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: ls -lRh ${{github.workspace}}/build
      
    - name: List executables (Windows)
      if: matrix.os == 'windows-latest'
      run: find "${{ github.workspace }}/build" -type f
      shell: bash
    
    # [ARCHIVE & UPLOAD] 
    # Archive the build outputs for Ubuntu and macOS
    - name: Archive Outputs (Ubuntu, MacOs)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      run: |
        tar czvf EXR_thumbnail_generator-${{ runner.os }}.tar.gz -C ${{github.workspace}}/build .

    # Upload the archived outputs for Ubuntu and macOS
    - name: Upload Outputs (Ubuntu, MacOs)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      uses: actions/upload-artifact@v3
      with:
        name: EXR_thumbnail_generator-${{ runner.os }}.tar.gz
        path: EXR_thumbnail_generator-${{ runner.os }}.tar.gz

    # Archive the build outputs for Windows
    - name: Archive Outputs (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        7z a EXR_thumbnail_generator-${{ runner.os }}.zip ${{github.workspace}}/build/Release/*

    # Upload the archived outputs for Windows
    - name: Upload Outputs (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: EXR_thumbnail_generator-${{ runner.os }}.zip
        path: EXR_thumbnail_generator-${{ runner.os }}.zip

    # [UPLOAD ARTIFACTS]
    #- name: Upload Artifact (Ubuntu, MacOs)
    #  uses: actions/upload-artifact@v3
    #  if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
    #  with:
    #    name: EXR_thumbnail_generator-${{ runner.os }}
    #    path: ${{github.workspace}}/build/

    #- name: Upload Artifact (Windows)
    #  uses: actions/upload-artifact@v3
    #  if: matrix.os == 'windows-latest'
    #  with:
    #    name: EXR_thumbnail_generator-${{ runner.os }}
    #    path: ${{github.workspace}}/build/Release/* 
  
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Download Artifacts
    - name: Download Artifacts
      uses: actions/download-artifact@master
      with:
        path: artifacts

    # Setup Node.js environment
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    # Install semantic-release and plugins
    - name: Install dependencies
      run: |
        npm install semantic-release @semantic-release/github @semantic-release/changelog @semantic-release/git

    # Run semantic-release
    - name: Semantic Release
      id: semantic
      run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Get latest release
      id: latest_release
      run: |
        LATEST_RELEASE_URL=$(curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --url 'https://api.github.com/repos/${{ github.repository }}/releases/latest' \
            --silent \
            --location \
            | jq -r '.upload_url')
        echo "Latest release URL is $LATEST_RELEASE_URL"
        echo "upload_url=$LATEST_RELEASE_URL" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for asset in artifacts/*; do
          if [[ -f "$asset" ]]; then
            echo "Uploading asset $asset"
            asset_name=$(basename $asset)
            content_type=$(file --mime-type -b $asset)
        
            curl \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: $content_type" \
              --data-binary "@$asset" \
              "${{ env.upload_url }}?name=$asset_name"
          fi
        done
    

    #- name: Check if new version is determined
    #  id: check_version
    #  run: |
    #    if [[ -z "${{ steps.semantic.outputs.new_version }}" ]]; then
    #      echo "No new version determined. Skipping release."
    #      echo "skip_release=true" >> $GITHUB_ENV
    #    fi

    ## Create Release using the version from semantic-release
    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ steps.semantic.outputs.new_version }}
    #    release_name: Release ${{ steps.semantic.outputs.new_version }}
    #    draft: false
    #    prerelease: false

    # Upload the archived outputs to the release for Linux
    #- name: Upload Release Assets for Linux
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }}
    #    asset_path: artifacts/EXR_thumbnail_generator-Linux.tar.gz
    #    asset_name: EXR_thumbnail_generator-${{ steps.semantic.outputs.new_version }}-Linux.tar.gz
    #    asset_content_type: application/gzip

    ## Upload the archived outputs to the release for macOS
    #- name: Upload Release Assets for macOS
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }}
    #    asset_path: artifacts/EXR_thumbnail_generator-macOS.tar.gz
    #    asset_name: EXR_thumbnail_generator-${{ steps.semantic.outputs.new_version }}-macOS.tar.gz
    #    asset_content_type: application/gzip

    # Upload the archived outputs to the release for Windows
    #- name: Upload Release Assets for Windows
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }}
    #    asset_path: artifacts/EXR_thumbnail_generator-Windows.zip
    #    asset_name: EXR_thumbnail_generator-${{ steps.semantic.outputs.new_version }}-Windows.zip
    #    asset_content_type: application/zip

  #release:
  #  needs: build
  #  runs-on: ubuntu-latest
  #  steps:
  #  # Create a single release
  #  - name: Create Release
  #    id: create_release
  #    uses: actions/create-release@v1
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    with:
  #      tag_name: latest
  #      release_name: Latest release
  #      draft: false
  #      prerelease: false

  #  # Download and upload the archived outputs to the release for each OS
  #  - name: Handle Assets
  #    run: |
  #      os_list=('ubuntu-latest' 'macOS-latest' 'windows-latest')
  #      asset_names=('EXR_thumbnail_generator-Linux.tar.gz' 'EXR_thumbnail_generator-macOS.tar.gz' 'EXR_thumbnail_generator-Windows.zip')
  #      content_types=('application/gzip' 'application/gzip' 'application/zip')
        
  #      for index in "${!os_list[@]}"; do
  #        os="${os_list[$index]}"
  #        asset_name="${asset_names[$index]}"
  #        content_type="${content_types[$index]}"
          
  #        # Download the artifact
  #        gh artifact download $asset_name --repo ${{ github.repository }}
          
  #        # Upload the artifact to the release
  #        gh release upload latest $asset_name --repo ${{ github.repository }} --content-type $content_type
  #      done
  #    env:
  #      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #      GH_REPO: ${{ github.repository }}

  #release:
  #  needs: build
  #  runs-on: ubuntu-latest
  #  strategy:
  #    matrix:
  #      os: ['ubuntu-latest', 'macOS-latest', 'windows-latest']
  #      include:
  #        - os: 'ubuntu-latest'
  #          asset_name: 'EXR_thumbnail_generator-Linux.tar.gz'
  #          content_type: 'application/gzip'
  #        - os: 'macOS-latest'
  #          asset_name: 'EXR_thumbnail_generator-macOS.tar.gz'
  #          content_type: 'application/gzip'
  #        - os: 'windows-latest'
  #          asset_name: 'EXR_thumbnail_generator-Windows.zip'
  #          content_type: 'application/zip'
  #  steps:
  #  - name: Download Artifacts
  #    uses: actions/download-artifact@master
  #    with:
  #      name: ${{ matrix.asset_name }}
  #      path: artifacts

  #  - name: Create Release
  #    id: create_release
  #    uses: actions/create-release@master
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    with:
  #      tag_name: latest
  #      release_name: Latest release
  #      draft: false
  #      prerelease: false

  #  # Upload the archived outputs to the release using matrix values
  #  - name: Upload Release Assets
  #    uses: actions/upload-release-asset@master
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    with:
  #      upload_url: ${{ steps.create_release.outputs.upload_url }}
  #      asset_path: artifacts/${{ matrix.asset_name }}
  #      asset_name: ${{ matrix.asset_name }}
  #      asset_content_type: ${{ matrix.content_type }}




